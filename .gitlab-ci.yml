# Ensure if the safedep/vet/scan component is available
include:
  - component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/scan@$CI_COMMIT_SHA
  - component: $CI_SERVER_FQDN/$CI_PROJECT_PATH/sbom@$CI_COMMIT_SHA


stages: [test, release]

variables:
  # make sure its same as the job name in the template/scan.yml
  SCAN_JOB_NAME: "vet_dependency_scanning"
  SBOM_JOB_NAME: "vet_sbom"

.ensure-job-added: &ensure-job-added
  stage: .pre
  image: badouralix/curl-jq
  script:
    - echo "Expect that a job named '$JOB_NAME' is added to the pipeline"
    - |
      if [ "$SHOULD_ADDED" = "false" ]; then
        echo "Skipping job '$JOB_NAME' because it should not be added"
        exit 0
      fi

      route="${CI_API_V4_URL}/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/jobs"
      if curl --silent --header "JOB-TOKEN: $CI_JOB_TOKEN" $route | jq -e "any(.name | contains(\"$JOB_NAME\"))" > /dev/null; then
        echo "Component Job '$JOB_NAME' is present"
      else
        echo "Component Job '$JOB_NAME' is not present"
        exit 1
      fi
  rules:
    - if: ($CI_COMMIT_BRANCH || $CI_COMMIT_TAG) && $CI_SERVER_HOST =~ /gitlab.com/ && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Only add the job on the default branch, befause in non-default branch the job is added only when the dependency files change # Only add the job on the default branch, befause in non-default branch the job is added only when the dependency files change # Only add the job on the default branch, befause in non-default branch the job is added only when the dependency files change # Only add the job on the default branch, befause in non-default branch the job is added only when the dependency files change

ensure-job-added-dependency-scanning:
  <<: *ensure-job-added
  variables:
    JOB_NAME: $SCAN_JOB_NAME

ensure-job-added-sbom:
  <<: *ensure-job-added
  variables:
    JOB_NAME: $SBOM_JOB_NAME

# Ensure that a project description exists, because it will be important to display
# the resource in the catalog.
check-description:
  stage: .pre
  image: badouralix/curl-jq
  script:
    - |
      route="$CI_API_V4_URL/projects/$CI_PROJECT_ID"
      desc=`curl --silent $route | jq '.description'`
      if [ "$desc" = "null" ]; then
        echo "Description not set. Please set a projet description"
        exit 1
      else
        echo "Description set"
      fi
  rules:
    - if: $CI_SERVER_HOST =~ /gitlab.com/


# Ensure that a `README.md` exists in the root directory as it represents the
# documentation for the whole components repository.
check-readme:
  stage: .pre
  image: busybox
  script: ls README.md || (echo "Please add a README.md file" && exit 1)

# Test Different Functionality of the Scanner
scanner-tests:
  stage: test
  script:
    - echo "Running Scanner Tests"

# Rlease is Required (specialy `release` keyword) for publishing CI Component To CI / CD Catalog
# See: https://docs.gitlab.com/ci/components/#publish-a-new-release
create-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script: echo "Creating release $CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG
  release:
    tag_name: $CI_COMMIT_TAG
    description: "Release $CI_COMMIT_TAG of components repository $CI_PROJECT_PATH"
