# This template is used to generate a dependency scanning report.
# Report format is JSON.
#
# Input Sepcification
# Docs: https://docs.gitlab.com/ci/yaml/#spec
spec:
  inputs:
    # vet specific inputs
    policy:
      description: 'Path to policy file, default policy will be used when not given'
      type: string 
      default: ''
    version: 
      description: 'vet version to use for the scan. Defaults to using latest release'
      type: string
      default: latest
    cloud:
      description: 'Synchronize configuration, policy and report with SafeDep cloud'
      type: boolean
      default: false
    cloud-key:
      description: 'API key to use for synchronizing report with SafeDep cloud'
      type: string
      default: ''
    cloud-tenant:
      description: 'Tenant ID to use for synchronizing report with SafeDep cloud'
      type: string
      default: ''
    exception-file:
      description: 'Path to exception file'
      type: string
      default: ''
    trusted-registries:
      description: 'List of trusted registry base URLs'
      type: array
      default: []
    timeout:
      description: 'Timeout in seconds for vet to wait for external service results to be available. For malicious package analysis, this set the maximum time to wait for the analysis results to be available.'
      type: number
      default: 300

    # gitlab specific inputs
    stage:
      description: 'The stage where you want the job to be added'
      default: test
    artifact-access:
      description: 'artifact access to determine who can access the job artifacts from the GitLab UI or API'
      type: string
      options: 
        - 'all'
        - 'developer'
        - 'none'
      default: 'developer'
    allow-failure: # Allowing a job to fail without stopping the pipeline.
      description: 'Whether the scanning job is allowed to fail' 
      type: boolean
      default: true
---

# If policy file is provided, check if it exists
.check-policy-file: &check-policy-file | 
  echo "Checking if policy file exists: $[[ inputs.policy ]]"

  if [ ! -z "$[[ inputs.policy ]]" ]; then
    echo "Checking file: $[[ inputs.policy ]]"

    if [ ! -f "$[[ inputs.policy ]]" ]; then
      echo "File not found: $[[ inputs.policy ]]"
      exit 1
    fi

    echo "Policy file found"
  fi

# If exception file is provided, check if it exists
.check-exception-file: &check-exception-file |
  echo "Checking if exception file exists: $[[ inputs.exception-file ]]"

  if [ ! -z "$[[ inputs.exception-file ]]" ]; then
    echo "Checking file: $[[ inputs.exception-file ]]"

    if [ ! -f "$[[ inputs.exception-file ]]" ]; then
      echo "File not found: $[[ inputs.exception-file ]]"
      exit 1
    fi

    echo "Exception file found"
  fi

# verify cloud config: check if key and tenant are provided when cloud is enabled
.veirfy-cloud-config: &veirfy-cloud-config |
  echo "Verifying cloud config"

  if [ "$[[ inputs.cloud ]]" = "true" ]; then
    echo "Cloud synchronization enabled, checking required parameters..."
    
    if [ -z "$[[ inputs.cloud-key ]]" ]; then
      echo "Error: cloud-key is required when cloud synchronization is enabled"
      exit 1
    fi
    
    if [ -z "$[[ inputs.cloud-tenant ]]" ]; then
      echo "Error: cloud-tenant is required when cloud synchronization is enabled"
      exit 1
    fi

    if [ -z "$[[ inputs.timeout ]]" ]; then
      echo "Error: timeout is required when cloud synchronization is enabled"
      exit 1
    fi
    
    echo "Cloud configuration validated successfully"
  fi

# Initialize the vet command
.setup-vet-command: &setup-vet-command |
  echo "Setting up vet command"

  CMD="vet scan --report-gitlab $ARTIFACT_FILENAME"

.add-policy-file: &add-policy-file |
  echo "Checking policy file to add to vet command"

  if [ ! -z "$[[ inputs.policy ]]" ]; then
    CMD="$CMD --filter-suite $[[ inputs.policy ]]"

    echo "Added policy file: $[[ inputs.policy ]]"
  fi

# Add cloud sync flags if cloud is enabled
.add-cloud-sync-flags: &add-cloud-sync-flags |
  echo "Checking if cloud sync is enabled"

  if [[ "$[[ inputs.cloud ]]" == "true" ]]; then
    CMD="$CMD --report-sync"
    CMD="$CMD --report-sync-project $CI_PROJECT_PATH"
    CMD="$CMD --report-sync-project-version $CI_COMMIT_REF_NAME"

    echo "Activating malicious package analysis with timeout: $[[ inputs.timeout ]]s"

    CMD="$CMD --malware"
    CMD="$CMD --malware-analysis-timeout $[[ inputs.timeout ]]s"

    echo "Added cloud sync flags"
  fi

# Add trusted registries if provided
.add-trusted-registries: &add-trusted-registries |
  echo "Adding trusted registries"

  # Input will be like a string of "[registry1, registry2, registry3]"

  # First remove the square brackets from the entire input string
  CLEANED_INPUT=$(echo "$[[ inputs.trusted-registries ]]" | sed -e 's/^\[//g' -e 's/\]$//g')

  # Convert the cleaned input to bash array
  IFS=',' read -ra REGISTRY_ARRAY <<< "$CLEANED_INPUT"

  # Loop through each registry and add it to the command
  for registry in "${REGISTRY_ARRAY[@]}"; do
    # Remove any spaces and quotes from anywhere in the string
    registry=$(echo "$registry" | sed -e 's/[[:space:]"]//g')
    if [ ! -z "$registry" ]; then
      CMD="$CMD --trusted-registry $registry"
      echo "Added trusted registry: $registry"
    fi
  done

  echo "Added trusted registries"

# Add exception file if provided
.add-exception-file: &add-exception-file |
  echo "Checking if exception file is provided"

  if [ ! -z "$[[ inputs.exception-file ]]" ]; then
    CMD="$CMD --exceptions $[[ inputs.exception-file ]]"

    echo "Added exception file: $[[ inputs.exception-file ]]"
  fi

# Execute the final command
.execute-vet-command: &execute-vet-command |
  echo "Executing vet command"

  $CMD

# Check if artifact file exists
.check-artifact-file: &check-artifact-file |
  echo "Checking if artifact file exists"

  if [ ! -f $ARTIFACT_FILENAME ]; then
    echo "Error: Artifact file not found: $ARTIFACT_FILENAME"
    exit 1
  fi

  echo "Artifact file exists"

vet_dependency_scanning:
  stage: $[[ inputs.stage ]]
  allow_failure: $[[ inputs.allow-failure ]]
  image: 
    name: ghcr.io/safedep/vet:$[[ inputs.version ]]
    entrypoint: [""] # by default vet's docker entrypoint is ["vet"] but we want to it as environment  / shell, so we override it to empty allowsing gitlab to work with it
  variables:
    ARTIFACT_FILENAME: "gl-dependency-scanning-report.json"
    VET_API_KEY: $[[ inputs.cloud-key ]]
    VET_CONTROL_TOWER_TENANT_ID: $[[ inputs.cloud-tenant ]]
  before_script:
    - vet version
    - *check-policy-file
    - *check-exception-file
    - *veirfy-cloud-config
  script: 
    - *setup-vet-command
    - *add-policy-file
    - *add-exception-file
    - *add-cloud-sync-flags
    - *add-trusted-registries
    - *execute-vet-command
  after_script:
    - *check-artifact-file
  artifacts:
    access: $[[ inputs.artifact-access ]]
    reports: 
      dependency_scanning: $ARTIFACT_FILENAME
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always

    # For other cases, run when dependency files change
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      changes:
        - Gemfile.lock
        - yarn.lock
        - Pipfile.lock
        - poetry.lock
        - go.mod
        - pom.xml
        - gradle.lockfile
        - requirements.txt
        - pnpm-lock.yaml
        - uv.lock
      when: always