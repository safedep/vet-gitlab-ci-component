# This template is used to generate a dependency scanning report.
# Report format is JSON.
#
# Input Sepcification
# Docs: https://docs.gitlab.com/ci/yaml/#spec
spec:
  inputs:
    # vet specific inputs
    policy:
      description: 'Path to policy file, default policy will be used when not given'
      type: string 
      default: '.gitlab/vet/policy.yml'
    version: 
      description: 'vet version to use for the scan. Defaults to using latest release'
      type: string
      default: latest
    cloud:
      description: 'Synchronize configuration, policy and report with SafeDep cloud'
      type: boolean
      default: false
    cloud-key:
      description: 'API key to use for synchronizing report with SafeDep cloud'
      type: string
      default: ''
    cloud-tenant:
      description: 'Tenant ID to use for synchronizing report with SafeDep cloud'
      type: string
      default: ''
    exception-file:
      description: 'Path to exception file'
      type: string
      default: ''
    trusted-registries:
      description: 'List of trusted registry base URLs'
      type: array
      default: []
    timeout:
      description: 'Timeout in seconds for vet to wait for external service results to be available. For malicious package analysis, this set the maximum time to wait for the analysis results to be available.'
      type: number
      default: 300

    # gitlab specific inputs
    stage:
      description: 'The stage where you want the job to be added'
      default: test
    artifact_access:
      description: 'artifact_access to determine who can access the job artifacts from the GitLab UI or API'
      type: string
      options: 
        - 'all'
        - 'developer'
        - 'none'
      default: 'developer'
    allow_failure: # Allowing a job to fail without stopping the pipeline.
      description: 'Whether the scanning job is allowed to fail' 
      type: boolean
      default: true
---
# For now policy file is required, but in future we can make it optional
# Since we are generating sarif report
# TODO: only check if its input is provided
.check-policy-file: &check-policy-file |
  echo "Checking policy file: $[[ inputs.policy ]]"

  if [ ! -f $[[ inputs.policy ]] ]; then
    echo "Policy file not found: $[[ inputs.policy ]]"
    exit 1
  fi

  echo "Policy file found"

# If exception file is provided, check if it exists
.check-exception-file: &check-exception-file |
  echo "Checking exception file: $[[ inputs.exception-file ]]"

  if [ ! -z "$[[ inputs.exception-file ]]" ]; then
    echo "Checking exception file: $[[ inputs.exception-file ]]"

    if [ ! -f "$[[ inputs.exception-file ]]" ]; then
      echo "Exception file not found: $[[ inputs.exception-file ]]"
      exit 1
    fi

    echo "Exception file found"
  fi

# We need curl and jq to check for lockfile changes in merge request pipelines
.download-curl-jq: &download-curl-jq |
  echo "Downloading curl and jq"

  apt-get update && apt-get install -y curl jq

.download-wget: &download-wget |
  echo "Downloading wget"

  apt-get update && apt-get install -y wget

  echo "wget downloaded"

# Download sarif-converter for converting sarif report to gitlab specific dependency scanning report 
.download-sarif-converter: &download-sarif-converter |
  echo "Downloading sarif-converter"

  wget -O sarif-converter https://gitlab.com/ignis-build/sarif-converter/-/releases/v0.9.4/downloads/bin/sarif-converter-linux-amd64
  chmod +x sarif-converter

  echo "sarif-converter downloaded"

# verify cloud config: check if key and tenant are provided when cloud is enabled
.veirfy-cloud-config: &veirfy-cloud-config |
  echo "Verifying cloud config"

  if [ "$[[ inputs.cloud ]]" = "true" ]; then
    echo "Cloud synchronization enabled, checking required parameters..."
    
    if [ -z "$[[ inputs.cloud-key ]]" ]; then
      echo "Error: cloud-key is required when cloud synchronization is enabled"
      exit 1
    fi
    
    if [ -z "$[[ inputs.cloud-tenant ]]" ]; then
      echo "Error: cloud-tenant is required when cloud synchronization is enabled"
      exit 1
    fi

    if [ -z "$[[ inputs.timeout ]]" ]; then
      echo "Error: timeout is required when cloud synchronization is enabled"
      exit 1
    fi
    
    echo "Cloud configuration validated successfully"
  fi

# Define lockfile patterns as a variable
.declare-variables-lockfile-patterns: &declare-variables-lockfile-patterns |
  echo "Declaring lockfile patterns"

  LOCKFILE_PATTERNS=(
    'Gemfile.lock',
    'package-lock.json',
    'yarn.lock',
    'Pipfile.lock',
    'poetry.lock',
    'go.mod',
    'pom.xml',
    'gradle.lockfile',
    'requirements.txt',
    'pnpm-lock.yaml',
    'uv.lock'
  )

# MERGER REQUEST SPECIFIC SCRIPT
# For Merge Request, we only run vet when dependency are changed (throught checking lockfiles changes)
# If no then return without scanning (no need)
.check-dependency-changes: &check-dependency-changes |
  echo "Checking dependency changes"

  if [ "$CI_PIPELINE_SOURCE" = "merge_request_event" ]; then
    echo "Running in a merge request pipeline, checking for lockfile changes..."

    # Get the list of changed files from the MR
    CHANGED_FILES=$(curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/changes" | \
      jq -r '.changes[].new_path')

    # Create pattern string from array
    PATTERN=$(IFS="|"; echo "${LOCKFILE_PATTERNS[*]}")
    
    # Check if any lockfiles are in the changed files
    CHANGED_LOCKFILES=$(echo "$CHANGED_FILES" | grep -E "$PATTERN")

    if [[ -z "$CHANGED_LOCKFILES" ]]; then
      echo "No lockfiles changed in this MR, skipping dependency scan"
      exit 0
    else
      echo "Lockfiles changed in this MR:"
      echo "$CHANGED_LOCKFILES"
      echo "Proceeding with dependency scan"
    fi
  fi

# Initialize the vet command
.setup-vet-command: &setup-vet-command |
  echo "Setting up vet command"

  CMD="vet scan --report-sarif $REPORT_FILENAME --filter-suite $[[ inputs.policy ]]"

# Add cloud sync flags if cloud is enabled
.add-cloud-sync-flags: &add-cloud-sync-flags |
  echo "Adding cloud sync flags"

  if [[ "$[[ inputs.cloud ]]" == "true" ]]; then
    CMD="$CMD --report-sync"
    CMD="$CMD --report-sync-project $CI_PROJECT_PATH"
    CMD="$CMD --report-sync-project-version $CI_COMMIT_REF_NAME"

    echo "Activating malicious package analysis with timeout: $[[ inputs.timeout ]]s"

    CMD="$CMD --malware"
    CMD="$CMD --malware-analysis-timeout $[[ inputs.timeout ]]s"
  fi

# Add trusted registries if provided
.add-trusted-registries: &add-trusted-registries |
  echo "Adding trusted registries"
  echo "Not Supported Yet"

# Add exception file if provided
.add-exception-file: &add-exception-file |
  echo "Adding exception file"

  if [ ! -z "$[[ inputs.exception-file ]]" ]; then
    echo "Using exception file: $[[ inputs.exception-file ]]"
    CMD="$CMD --exceptions $[[ inputs.exception-file ]]"
  fi

# Execute the final command
.execute-vet-command: &execute-vet-command |
  echo "Executing vet command"

  $CMD

# Check if SARIF report file exists
.check-sarif-report: &check-sarif-report |
  if [ ! -f $REPORT_FILENAME ]; then
    echo "Error: SARIF report file not found: $REPORT_FILENAME"
    exit 1
  fi

# Convert SARIF report to GitLab specific format
.convert-sarif-report: &convert-sarif-report |
  ./sarif-converter --type sast $REPORT_FILENAME $ARTIFACT_FILENAME


# Check if artifact file exists
.check-artifact-file: &check-artifact-file |
  if [ ! -f $ARTIFACT_FILENAME ]; then
    echo "Error: Artifact file not found: $ARTIFACT_FILENAME"
    exit 1
  fi

vet_dependency_scanning:
  stage: $[[ inputs.stage ]]
  allow_failure: $[[ inputs.allow_failure ]]
  image: 
    name: ghcr.io/safedep/vet:$[[ inputs.version ]]
    entrypoint: [""] # by default vet's docker entrypoint is ["vet"] but we want to it as environment  / shell, so we override it to empty allowsing gitlab to work with it
  before_script:
    - *check-policy-file
    - *check-exception-file
    - *download-curl-jq
    - *declare-variables-lockfile-patterns
    - *check-dependency-changes
    - *veirfy-cloud-config
    - *download-wget
    - *download-sarif-converter
  variables:
    ARTIFACT_FILENAME: "gl-dependency-scanning-report.json"
    REPORT_FILENAME: "local-report.sarif"
  script: 
    - *setup-vet-command
    - *add-cloud-sync-flags
    - *add-trusted-registries
    - *add-exception-file
    - *execute-vet-command
    - *check-sarif-report
    - *convert-sarif-report
    - *check-artifact-file
  artifacts:
    access: $[[ inputs.artifact_access ]]
    reports: # This is required for Security Scanning
      sast: $ARTIFACT_FILENAME
    expire_in: 1 week

