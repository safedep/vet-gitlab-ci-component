# This template is used to generate a dependency scanning report.
# Report format is JSON.
#
# Input Sepcification
# Docs: https://docs.gitlab.com/ci/yaml/#spec
spec:
  inputs:
    # vet specific inputs
    policy:
      description: 'Path to policy file, default policy will be used when not given'
      type: string 
      default: '.gitlab/vet/policy.yml'
    version: 
      description: 'vet version to use for the scan. Defaults to using latest release'
      type: string
      default: latest
    cloud:
      description: 'Synchronize configuration, policy and report with SafeDep cloud'
      type: boolean
      default: false
    cloud-key:
      description: 'API key to use for synchronizing report with SafeDep cloud'
      type: string
      default: ''
    cloud-tenant:
      description: 'Tenant ID to use for synchronizing report with SafeDep cloud'
      type: string
      default: ''
    exception-file:
      description: 'Path to exception file'
      type: string
      default: '.gitlab/vet/exceptions.yml'
    trusted-registries:
      description: 'List of trusted registry base URLs'
      type: array
      default: []
    timeout:
      description: 'Timeout in seconds for vet to wait for external service results to be available. For malicious package analysis, this set the maximum time to wait for the analysis results to be available.'
      type: number
      default: 300

    # gitlab specific inputs
    stage:
      description: 'The stage where you want the job to be added'
      default: test
    artifact_access:
      description: 'artifact_access to determine who can access the job artifacts from the GitLab UI or API'
      type: string
      options: 
        - 'all'
        - 'developer'
        - 'none'
      default: 'developer'
    allow_failure: # Allowing a job to fail without stopping the pipeline.
      description: 'Whether the scanning job is allowed to fail' 
      type: boolean
      default: true
---
# For now policy file is required, but in future we can make it optional
# Since we are generating sarif report
.check-policy-file: &check-policy-file |
  echo "Checking policy file: $[[ inputs.policy ]]"

  if [ ! -f $[[ inputs.policy ]] ]; then
    echo "Policy file not found: $[[ inputs.policy ]]"
    exit 1
  fi

  echo "Policy file found"

.download-wget: &download-wget |
  echo "Downloading wget"

  apt-get update && apt-get install -y wget

  echo "wget downloaded"

# Download sarif-converter for converting sarif report to gitlab specific dependency scanning report 
.download-sarif-converter: &download-sarif-converter |
  echo "Downloading sarif-converter"

  wget -O sarif-converter https://gitlab.com/ignis-build/sarif-converter/-/releases/v0.9.4/downloads/bin/sarif-converter-linux-amd64
  chmod +x sarif-converter

  echo "sarif-converter downloaded"

# verify cloud config: check if key and tenant are provided when cloud is enabled
.veirfy-cloud-config: &veirfy-cloud-config |
  if [ "$[[ inputs.cloud ]]" = "true" ]; then
    echo "Cloud synchronization enabled, checking required parameters..."
    
    if [ -z "$[[ inputs.cloud-key ]]" ]; then
      echo "Error: cloud-key is required when cloud synchronization is enabled"
      exit 1
    fi
    
    if [ -z "$[[ inputs.cloud-tenant ]]" ]; then
      echo "Error: cloud-tenant is required when cloud synchronization is enabled"
      exit 1
    fi

    if [ -z "$[[ inputs.timeout ]]" ]; then
      echo "Error: timeout is required when cloud synchronization is enabled"
      exit 1
    fi
    
    echo "Cloud configuration validated successfully"
  fi

vet_dependency_scanning:
  stage: $[[ inputs.stage ]]
  allow_failure: $[[ inputs.allow_failure ]]
  image: 
    name: ghcr.io/safedep/vet:$[[ inputs.version ]]
    entrypoint: [""] # by default vet's docker entrypoint is ["vet"] but we want to it as environment  / shell, so we override it to empty allowsing gitlab to work with it
  before_script:
    - *check-policy-file
    - *veirfy-cloud-config
    - *download-wget
    - *download-sarif-converter
  variables:
    ARTIFACT_FILENAME: "gl-dependency-scanning-report.json"
    REPORT_FILENAME: "local-report.sarif"
  script: |
    CMD="vet scan --report-sarif $REPORT_FILENAME --filter-suite $[[ inputs.policy ]]"
    
    # Add cloud sync flags if cloud is enabled
    if [[ "$[[ inputs.cloud ]]" == "true" ]]; then
      CMD="$CMD --report-sync"
      CMD="$CMD --report-sync-project $CI_PROJECT_PATH"
      CMD="$CMD --report-sync-project-version $CI_COMMIT_REF_NAME"

      echo "Activating malicious package analysis with timeout: $[[ inputs.timeout ]]s"

      CMD="$CMD --malware"
      CMD="$CMD --malware-analysis-timeout $[[ inputs.timeout ]]s"
    fi

    # Add trusted registries if provided
    if [[ "${#[[ inputs.trusted-registries ]]}" -gt 0 ]]; then
      echo "Using trusted registries: ${[[ inputs.trusted-registries ]]}"
      
      # Loop through each registry in the array
      for registry in "${[[ inputs.trusted-registries ]]}"; do
        CMD="$CMD --trusted-registry $registry"
      done
    fi

    # Execute the final command
    $CMD

    # Check if SARIF report file exists
    if [ ! -f $REPORT_FILENAME ]; then
      echo "Error: SARIF report file not found: $REPORT_FILENAME"
      exit 1
    fi

    # Convert SARIF report to GitLab specific format
    ./sarif-converter --type sast $REPORT_FILENAME $ARTIFACT_FILENAME

    # Check if artifact file exists
    if [ ! -f $ARTIFACT_FILENAME ]; then
      echo "Error: Artifact file not found: $ARTIFACT_FILENAME"
      exit 1
    fi
  artifacts:
    access: $[[ inputs.artifact_access ]]
    reports: # This is required for Security Scanning
      sast: $ARTIFACT_FILENAME
    expire_in: 1 week

